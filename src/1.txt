import javax.xml.XMLConstants;
import javax.xml.namespace.QName;
import javax.xml.stream.*;
import javax.xml.stream.events.Attribute;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class Stax {


    public static class StaxDemo {


        void readStaxEvent(String filename) throws XMLStreamException {
            List lst = new ArrayList();
            int numberLineBusStation=0;
            int currentLineNumber=0;
            int nextTagNumber;
            String nextStartEl = "";
            try {
                XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();
                XMLEventReader eReader = xmlInputFactory.createXMLEventReader(new FileReader(filename));
                // XMLEventReader создаёт временные объекты XMLEvent по ходу чтения
                Integer countBusStation=1;
                while (eReader.hasNext()) {
                    XMLEvent e =  eReader.nextEvent();
                    XMLEvent nextEvent;// = eReader.peek();
                    //eReader.nextTag();
                    // следующее событие при чтении XML
                    switch(e.getEventType()) {
                        case XMLEvent.START_ELEMENT:
                           // StartElement se = ;


                            System.out.printf("%s - %s - %s <%s ",e.asStartElement().getLocation().getLineNumber(),numberLineBusStation,nextStartEl,e.asStartElement().getName());
                            Iterator<Attribute> iterator = e.asStartElement().getAttributes();
                            while (iterator.hasNext())
                            {
                                Attribute attribute = iterator.next();
                                String value = attribute.getValue();
                                String name = attribute.getName().getLocalPart();
                                System.out.print("\t" + name + "= " + value);
                               // if(name.equals("k")&&value.equals("highway")){
                                 currentLineNumber = e.asStartElement().getLocation().getLineNumber();
                                    if(name.equals("v")&&value.equals("bus_stop")) {
                                        //System.out.printf("<%s ",e.asStartElement().getName());
                                        numberLineBusStation = e.asStartElement().getLocation().getLineNumber();
                                        System.out.println(numberLineBusStation);
                                        System.out.println("НАШЕЛ!!" + numberLineBusStation) ;
                                        //System.exit(0);
                                        //lst.add(e.asStartElement().getLocation().getLineNumber());
                                        }




                               // }
                            }
                            System.out.print(">");

                            if (currentLineNumber-numberLineBusStation==1) {
                                System.out.println("Нашел!!!!");
                                lst.add( numberLineBusStation+"" + e.asStartElement().getAttributeByName(new QName("v")));
                                //System.exit(0);
                            }
//                            if (se.getName().getLocalPart().equals("tag")){
//                                countBusStation++;
//                                //System.out.println("сюда вошли");
//                              //  System.out.printf("%s <%s>",countBusStation, event..getName() );
//                            }
                            break;


                        case XMLEvent.END_ELEMENT:
                           // EndElement ee = ;
                            System.out.printf( "</%s> - %s \n",e.asEndElement().getName().getLocalPart(), nextStartEl);

                            break;
                    }
                    nextEvent = eReader.nextEvent();

                    nextTagNumber = nextEvent.getLocation().getLineNumber();
                    nextStartEl=nextEvent.toString();

                    System.out.println("след тег " + nextStartEl);
//                    if (e.isCharacters()) {
//                        if (e.asCharacters().isCData()) {
//                            System.out.println("(CDATA)"+ e.asCharacters().isCData() );
//                        }
//                        e.asCharacters().getData();
//                        if (!e.asCharacters().isIgnorableWhiteSpace() ) {
//                            System.out.println(
//                                    "["+e.asCharacters().getData()+"]"
//                            );
//                        }
//                    }

                }
                System.out.println(lst.toString());
            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (XMLStreamException ex) {
                ex.printStackTrace();
            }
        }

//        void readStaxStream(String filename) {
//            try {
//                XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();
//
//                XMLStreamReader sReader = xmlInputFactory.createXMLStreamReader(new FileReader(filename));
//
//                // XMLEventReader создаёт временные объекты XMLEvent по ходу чтения
//                while (sReader.hasNext()) {
//                    //eReader.peek() - подсмотреть следущее событие без перехода на него
//
//                    int code = sReader.next();
//                    // следующее событие при чтении XML
//
//                    switch(code) {
//                        case XMLEvent.START_ELEMENT:
//
//                            System.out.printf(
//                                    "<%s ",
//                                    sReader.getLocalName());
//
//                            int ac = sReader.getAttributeCount();
//                            Map<String,String> attrMap
//                                    = new LinkedHashMap<String, String>();
//                            for (int i=0;i<ac;i++) {
//                                attrMap.put(
//                                        sReader.getAttributeLocalName(i),
//                                            //    "/"+sReader.getAttributeType(i)+"/",
//                                        sReader.getAttributeValue(i));
//                            }
//
//                            System.out.print(attrMap);
//                            System.out.println(">");
////
//                            if (sReader.getLocalName().equals("tag")) {
//                                //System.out.println(sReader.getLocalName());
//                                System.out.println("следующий тег = "  );
//                            }
//
////
////                            if (sReader.getLocalName()
////                                    .equals("material")) {
////                                System.out.println("inner text="+
//                                      // sReader.getElementText();
////                                );
////                                // считывает до конца тега и берет текст
////                            }
//                            break;
//                        case XMLEvent.END_ELEMENT:
//                            System.out.printf("</%s> \n",
//                                    sReader.getLocalName());
//                            break;
//                    }
//                    if (sReader.isCharacters()) {
//                        if (!sReader.isWhiteSpace()) {
//                            System.out.println("["+sReader.getText()+"]");
//                        }
//                    }
//                }
//
//            } catch (IOException ex) {
//                ex.printStackTrace();
//            } catch (XMLStreamException ex) {
//                ex.printStackTrace();
//            }
//        }


        // простая проверка схемы
        void schemaCheckerTest() {
            try {
                SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
                Schema schema = factory.newSchema(new File("osm.xsd"));
                Validator validator = schema.newValidator();
                validator.validate(new StreamSource(new File("UfaCenterSmall.xml")));
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

        void writeStaxExample() {
            XMLOutputFactory xof
                    = XMLOutputFactory.newFactory();

            try {
                XMLStreamWriter sw2
                        = xof.createXMLStreamWriter(System.err);
                XMLStreamWriter sw=sw2;//new IndentingXMLStreamWriter(sw2); // only for older JDKs

                sw.writeStartDocument();
                sw.writeStartElement("hello");
                sw.writeAttribute("a", "2");
                sw.writeAttribute("b", "3&<>&");
                sw.writeCharacters("\nsome text \"\"<b> ");
                sw.writeEmptyElement("emptyElement");
                sw.writeEndElement();
                sw.writeEndDocument();

                sw.close();
            } catch (XMLStreamException ex) {
                ex.printStackTrace();
            }



        }



}

}




    @Override
    public String toString(){
        return name + "(" + highways + ")";
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        StreetData that = (StreetData) o;
        return Objects.equals(name, that.name) &&
                Objects.equals(highways, that.highways);
    }

    @Override
    public int hashCode() {

        return Objects.hash(name, highways);
    }

}



import generated.Node;
import generated.Osm;
import generated.Tag;
import generated.Way;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import java.io.File;
import java.util.*;

public class JAXBProcessor {
    Osm osm;
    List<String> busStopList = new ArrayList<>();
    Map<String, StreetData> streetMap = new TreeMap<String, StreetData>();

    void unmarshal(String fileName) throws JAXBException {
        JAXBContext jaxbContext = JAXBContext.newInstance("generated");
        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();

        osm = (Osm) unmarshaller.unmarshal(new File(fileName));

        for (Object o: osm.getBoundOrUserOrPreferences()){
            boolean isBusStop = false;
            String proposalBusStopName = null;
            String highway = null;
            String streetName = null;

            if (o.getClass()== Node.class){
                Node node = (Node) o;
                for (Tag tag : node.getTag()){
                    if (tag.getK().equals("highway")&&(tag.getV().equals("bus_stop"))) isBusStop = true;
                    if (tag.getK().equals("name")) proposalBusStopName = tag.getV();
                    if ((isBusStop)&&(proposalBusStopName!=null)) {
                        busStopList.add(proposalBusStopName);
                        break;
                    }
                }
            }else
                if (o.getClass()== Way.class){
                Way way = (Way) o;
                for (Object o1 : way.getRest()){
                    if (o1.getClass().equals(Tag.class)){
                        Tag tag = (Tag) o1;
                        if (tag.getK().equals("highway")) highway = tag.getV();
                        if (tag.getK().equals("name")) streetName = tag.getV();
                    }

                }
                    if ((highway!=null)&&(streetName!=null)) {
                        if (streetMap.containsKey(streetName)){
                            streetMap.get(streetName).highways.add(highway);
                        }else {
                            StreetData streetData = new StreetData(streetName, highway);
                            streetMap.put(streetName, streetData);
                        }
                    }

                }
        }
        //System.out.println(busStopList);
        //System.out.println(streetMap);


    }
}
